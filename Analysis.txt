Task0: O(1)
    - accesss the texts list by index O(1)
    - print statement O(1)
    - access the calls list by index O(1)
    - print statement O(1)
    The worst case run time is constant O(1).


Task1: O(n)
    - iterate texts in a loop O(t)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - add calling number to set O(1)
        - add aswering number to set O(1)
    - iterate calls in a loop O(c)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - add calling number to set O(1)
        - add answering number to set O(1)
    - count assignment and len operations O(1)
    - print statement O(1)
    The worst case run time is linear O(n), proportional to input size of both csv files.
    n = total input size of both csv files: O(n) = O(t + c)
    The set.add() operation is O(1) on average when implemented by a hash table.
    len() operation on list is O(1)
    

Task2: O(n)
    - iterate calls in a loop O(n)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - read duration by list index and cast to int O(1)
        - get value from total_time dictionary or set value = 0 if calling_number key not found O(1)
        - set value = value + 1 to total_time dictionary for calling_number key O(1)
        - get value from total_time dictionary or set value = 0 if answering_number key not found O(1)
        - set value = value + 1 to total_time dictionary for answering_number key O(1)
    - iterate total_time dictionary in a loop O(n)
        - if conditional comparison O(1)
        - max_number assignment O(1)

    The worst case run time is linear O(n), proportional to the input size of the calls CSV file.
    The total_time dictionary has the unique numbers as keys, the size will be at most n, if all calls have unique numbers.
    The max_number assignment will be executed at most n times in the worst time.
    The dictionary get()/set() operations are O(1) on average when implemented by a hash table.


Task3: O(nlogn)
    - iterate calls in a loop O(n)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - if conditional comparison O(1)
        - from_bangalore assignment and increment O(1)
        - if conditional comparison O(1)
        - find string operation O(s), where s is string length
        - code assignment substring O(1)
        - set add operation O(1)
        - if coditional comparison O(1)
        - from_and_to_bangalore assignment and increment O(1)
        - if conditional and 'in' comparison with 3 options O(1)
        - set add operation O(1)
        - if coditional comparison O(1)
        - set add operation O(1)
    - unique_sorted_codes assignment and list creation O(n)
    - unique_sorted_codes sort() operation O(nlogn)
    - print operation O(1)
    - iterate unique_sorted_codes in a loop O(n)
        - print operation O(1)
    - percentage assignment and division operation O(1)
    - print operation O(1)

    The worst case run time is O(nlogn), proportional to the input size of the calls CSV file.
    string find operation takes O(s*b) in the worst case, in our case the single char is in the first positions and should run quickly,
    where s is the string and b is the substring. If b is a single char, then complexity is O(s).
    Since the strings are small, s is relatively small to n, the O(n) for the Calls CSV input size is much more relevant.
    * The complexity is dominated by sort O(nlogn) complexity over O(n) loops.


Task4: O(nlogn)
    - iterate texts in a loop O(t)
        - read sending_number by list index O(1)
        - read receiving_number by list index O(1)
        - set add operation O(1)
        - set add operation O(1)
    - iterate calls in a loop O(c)
        - read sending_number by list index O(1)
        - read receiving_number by list index O(1)
        - set add operation O(1)
        - set add operation O(1)
    - iterate makes_calls_number in a loop O(c)
        - if conditional + 4 'in' operator calls to 'set.__contains__()' operations O(1)
        - list append operation O(1)
    - possible_telemarketers list.sort() operation O(nlogn)
    - iterate possible_telemarketers in a loop O(c)
        - print operation O(1)

    The worst case run time is O(nlogn), proportional to input size of both CSV files.
    The set.add()/set.__contains__() operations are O(1) on average when implemented by a hash table.
    n = total input size of both csv files: O(n) = O(t + c)
    * The complexity is dominated by sort O(nlogn) complexity over O(n) loops.