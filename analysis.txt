Task0: O(1)
    - accesss the texts list by index O(1)
    - print statement O(1)
    - access the calls list by index O(1)
    - print statement O(1)
    The worst case run time is constant.


Task1: O(n)
    - iterate texts in a loop O(t)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - add calling number to set O(1)
        - add aswering number to set O(1)
    - iterate calls in a loop O(c)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - add calling number to set O(1)
        - add answering number to set O(1)
    - print statement O(1)
    The worst case run time is linear O(n), proportional to input size of both csv files.
    The set add operation is O(1) on average when implemented by a hash table.
    if n = total input size of both csv files: O(n) = O(t + c)


Task2: O(n)
    - iterate calls in a loop O(n)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - read duration by list index and cast to int O(1)
        - get value from total_time dictionary or set value = 0 if calling_number key not found O(1)
        - set value = value + 1 to total_time dictionary for calling_number key O(1)
        - get value from total_time dictionary or set value = 0 if answering_number key not found O(1)
        - set value = value + 1 to total_time dictionary for answering_number key O(1)
    - iterate total_time dictionary in a loop O(n)
        - if conditional comparison O(1)
        - max_number assignment O(1)


    The worst case run time is linear O(n), proportional to the input size of the calls CSV file.
    The total_time dictionary has the unique numbers as keys, the size will be at most n, if all calls have unique numbers.
    Where n is the input size of the calls CSV file.
    The max_number assignment will be executed at most n times in the worst time.
    The dictionary get/set operation is O(1) on average when implemented by a hash table.