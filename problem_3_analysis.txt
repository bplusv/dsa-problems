Problem_3: O(nlogn)
    - iterate calls in a loop O(n)
        - read calling_number by list index O(1)
        - read answering_number by list index O(1)
        - if conditional comparison O(1)
        - from_bangalore assignment and increment O(1)
        - if conditional comparison O(1)
        - find string operation O(s), where s is string length
        - code assignment substring O(1)
        - set add operation O(1)
        - if coditional comparison O(1)
        - from_and_to_bangalore assignment and increment O(1)
        - if conditional and 'in' comparison with 3 options O(1)
        - set add operation O(1)
        - if coditional comparison O(1)
        - set add operation O(1)
    - unique_sorted_codes assignment and list creation O(n)
    - unique_sorted_codes sort() operation O(nlogn)
    - print operation O(1)
    - iterate unique_sorted_codes in a loop O(n)
        - print operation O(1)
    - percentage assignment and division operation O(1)
    - print operation O(1)

    The worst case run time is O(nlogn), proportional to the input size of the calls CSV file.
    string find operation takes O(s*b) in the worst case, in our case the single char is in the first positions and should run quickly,
    where s is the string and b is the substring. If b is a single char, then complexity is O(s).
    Since the strings are small, s is relatively small to n, the O(n) for the Calls CSV input size is much more relevant.
    * The complexity is dominated by sort O(nlogn) complexity over O(n) loops.
